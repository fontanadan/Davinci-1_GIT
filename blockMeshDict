/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.01;

vertices
(
// bump
    (  0      7.62   -0.06604 )  //0
    ( 20.32   7.62   -0.06604 )  //1
    ( 20.32   81.28  -0.7091  )  //2
    (  0      81.28  -0.7091  )  //3
    (  0      7.62    0.06604 )  //4
    ( 20.32   7.62    0.06604 )  //5
    ( 20.32   81.28   0.7091  )  //6
    (  0      81.28   0.7091  )  //7
// pre bump
    (-200     7.62   -0.06604 )  //8
    (-200     81.28  -0.7091  )  //9
    (-200     7.62    0.06604 )  //10
    (-200     81.28   0.7091  )  //11
// post bump
    ( 400     7.62   -0.06604 )  //12
    ( 400     81.28  -0.7091  )  //13
    ( 400     7.62    0.06604 )  //14
    ( 400     81.28   0.7091  )  //15

);


/*
vertices
(
// bump
    (0       -0  -5)
    (20.32   -0  -5)
    (20.32   61  -5)
    (0       61  -5)
    (0       -0   5)
    (20.32   -0   5)
    (20.32   61   5)
    (0       61   5)
// pre bump
    (-200   -0  -5)
    (-200   61  -5)
    (-200   -0   5)
    (-200   61   5)
// post bump
    (400    -0  -5)
    (400    61  -5)
    (400    -0   5)
    (400    61   5)
);
*/

blocks
(
    hex ( 0  1  2  3  4  5  6  7) ( 181 81  1) simpleGrading ( 1 60 1)
    hex ( 8  0  3  9 10  4  7 11) ( 181 81  1) simpleGrading ( 1 60 1)
    hex ( 1 12 13  2  5 14 15  6) ( 181 81  1) simpleGrading ( 1 60 1)
);

edges
(
// include bump arcs 
  
   arc 0 1 (10.16  9.525   -0.06604)
   arc 4 5 (10.16  9.525    0.06604)

/*
   arc 0 1 (10.16 1.91 -5) 
   arc 4 5 (10.16 1.91  5) 
*/

);

boundary
(
    my-velocity-inlet
    {
        type patch;
        faces
        (
	   (10 11 9 8)
        );
    }
    my-pressure-outlet
    {
        type patch;
        faces
        (
           (14 12 13 15)
        );
    }
    my-wall
    {
        type wall;
        faces
        (
           (8 0 4 10 )
           (4 0 1 5  )
           (5 1 12 14)
        );
    }

frontLeftPlane
    {
        type                    cyclic;
        neighbourPatch          backLeftPlane;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 (10  4  7 11)
        );
    }
    frontRightPlane
    {
        type                    cyclic;
        neighbourPatch          backRightPlane;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 5 14 15  6)
        );
    }
    frontBump
    {
        type                    cyclic;
        neighbourPatch          backBump;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 4  5  6  7)
        );
    }
    backLeftPlane
    {
        type                    cyclic;
        neighbourPatch          frontLeftPlane;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 8  9  3  0)
        );
    }
    backRightPlane
    {
        type                    cyclic;
        neighbourPatch          frontRightPlane;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 1 2 13 12)
        );
    }
    backBump
    {
        type                    cyclic;
        neighbourPatch          frontBump;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 0  3  2  1)
        );
    }

/*
    frontAndBackPlanes
    {
        type empty;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
            (8 9 3 0)
            (10 4 7 11)
            (1 2 13 12)
            (5 14 15 6)
        );
    }
*/
    freeSurf
    {   
        type symmetryPlane;
        faces
        (
            (11 7 3 9 )
            (7 6 2 3  )
            (6 15 13 2)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
